---
layout: post
title:  Interacting Particle Simulation - 1
date:   2018-07-11 
permalink: /interacting-particle-sim-1
author: "Alok Bakshi"
---

## Introduction

Consider a system of $$ N $$ particles which are confined inside a container of finite volume. Assume that the particles interact each other through only attractive force (say, inverse square gravitational force) and the collision among them as well as between the particle and container boundary is perfectly elastic. For definiteness, say interaction force $$ F^j_i $$ experienced by particle $$ i $$ located at $$ \mathbf{r_i} $$ because of the particles $$ j $$ located at $$ \mathbf{r_j} $$ is given by  

$$ 
\begin{aligned}F^j_i = \begin{cases} \frac{C}{\mid \mathbf{r} \mid^2}  \widehat{\mathbf{r}}  & \mid r \mid < \mbox{cutoff} \\ 0 & \mbox{otherwise} \end{cases} \end{aligned} \ \ \ \ \ \mbox{ where } \mathbf{r} =  \mathbf{r_i - r_j} 
$$

The total vector force on particle $$ i \in \left\{ 1, 2, \ldots, N \right\} $$ is given by 
$$
F_i = \sum_{j = 1, j \neq i}^N F_i^j
$$

#### Further Modelling Assumptions

In general, it is not [analytically possible](https://en.wikipedia.org/wiki/N-body_problem) to predict the trajectory of each particle in future therefore the only means to study the system at later time is via simulation.  

For simplicity, the following modeling assumptions are made

* The system is modeled in two dimension even though one can easily move to higher dimensions (except requiring far more computation)

* Density of the particles inside the container is chosen to be quite low (one can think of the system to be in *gaseous* state)
	
* Initially particles are uniformly distributed with bounded velocities. 


Under these assumptions, owing to the second law of thermodynamics, the particles would typically remain uniformly distributed inside the container.


## Naive Serial Algorithm

One of the naive way to run the simulation is to calculate point to point force between each pair of particles. 

In `C` we first declare the relevant variables

{% highlight C %}
/* C: Interaction force strength, cutoff: Interaction force cutoff */
int C, cutoff;

/* N : Number of particles */
int N;

/* x_pos, y_pos store (x, y) Coordinates of each particle */
double *x_pos, *y_pos;

/* x_inter_force, y_itr_force : Interaction force on each particle along x and y axes*/
double *x_itr_force, *y_itr_force;
{% endhighlight %}

Next, the interaction force along $$ x $$ and $$ y $$ axes namely `x_itr_force` and `y_itr_force` for each particle can be calculated as follows

{% highlight C %}

const int sq_cutoff = cutoff * cutoff;

for(int idx = 0; idx < N; ++idx)
{
    double x_force = 0, y_force = 0;

    for(int n_idx = 0; (n_idx < N) && (n_idx != idx); ++n_idx)
    {
        double x_diff = x_pos[idx] - x_pos[n_idx];
        double y_diff = y_pos[idx] - y_pos[n_idx];

        double sq_dist = x_diff * x_diff + y_diff * y_diff;

        if(sq_dist > sq_cutoff)
            continue;

        double mul_factor = ( C / sq_dist );

        x_force += (mul_factor * x_diff);
        y_force += (mul_factor * y_diff);
    }
  
    x_itr_force[idx] = x_force;                
    y_itr_force[idx] = y_force;
}

{% endhighlight %}

#### Pros and Cons of naive serial algorithm

Looking at the above algorithm we can see its run time complexity is $$ O(N^2) $$. Thus unless number of particles size is low, it is not a reasonable algorithm to run. 

On a more positive note, each iteration of outside loop can run independently of each other as they do not have any data dependency. Thus parallelizing the above code (in say, OpenMP framework) is as simple as adding one line i.e.

{% highlight C %}

const int sq_cutoff = cutoff * cutoff;

#pragma omp parallel for
for(int idx = 0; idx < N; ++idx)
{
    /* Res of the code */
}

{% endhighlight %}

## Optimized Serial Algorithm

In order to optimize the serial code, we first of all observe that each particle interacts only with particles inside the *cutoff – neighborhood* of it. Moreover as the density of particles inside the container remains practically constant with time so on average we expect each particle to interact only with finitely many particles. Thus in principle, the code can be made to run in $$ O(N) $$ time.

To that end we first divide the whole container into fixed number of bins. The size of each bin is made nearly equal to the cutoff (say `1.01 * cutoff`) so that in order to calculate the force on a particle we only need to check for interactions via particles lying inside the current and neighboring bins. Since each bin – in principle – can have as many particles as possible (each particle is conveniently modelled as point particle with no internal structure) therefore we associate `Linked List` data structure to each of the bin, which if needed, can accomodate more than one particle. 

Nevertheless as density is practically constant so almost every such bin will have at most one particle inside it justifying the expected complexity of $$ O(N) $$ run time.

(to be continued...)